VKafka-Unzip/src/folder/Zipunzip.java - Spring Tool Suite 4
Edit
Source
Refactor
Source
Navigate
Search
Project
Run
Window
Help
0-0-
config.properties
Akash2.java
ExcelLogger.java
config2.properties
Zipunzip.ja
1 package folder;
2
30 import java.io.BufferedOutputStream;
4 import java.io.FileInputStream;
5 import java.io.IOException;
6 import java.nio.file.DirectoryStream;
7 import java.nio.file.Files;
8 import java.nio.file.Path;
9 import java.nio.file.Paths;
10 import java.nio.file.StandardCopyOption;
11 import java.util.logging.FileHandler;
12 import java.util.logging.Level;
13 import java.util.logging.Logger;
14 import java.util.logging.SimpleFormatter;
15 import java.util.zip.ZipEntry;
16 import java.util.zip.ZipInputStream; 17
18 public class Zipunzip {
19
20
21 private static config2_read config2_read=new config2_read();
22 23 private static final Logger log Logger.getLogger(Zipunzip.class.getName());
246
25
26
27
28
29
30
32
public static void main(String[] args) {
try {
// Create a FileHandler that writes log to "app.log"
FileHandler fileHandler = new FileHandler("app.log", true); // 'true' en fileHandler.setFormatter(new SimpleFormatter()); // Optional: format the
Log.addHandler(fileHandler);
32
33
34
35
36
37
38
ad
} catch (IOException e) {
} Log.log(Level. SEVERE, "Failed to set up file handler", e);
Path docmentsfolder-Paths.get(config2_read.Docments());
Dath fotlodfolder-Dathe cat/confing rond Fai٦/١١٠
Q
Search
L


Source Refactor
Source
Navigate
Search
Window
Help
Project
Run
config.properties
22
23
Ju
246
25
26
27
Akash2.java
ExcelLogger.java
config2.properties
Zipunzip.java X
config2.properties
app.log
private static final Logger Log Logger.getLogger(Zipunzip.class.getName());
public static void main(String[] args) {
config2_read.java
try {
28
29
30
31
32
33
34
35
36
37
46
41
// Create a FileHandler that writes log to "app.log"
FileHandler fileHandler = new FileHandler("app.log", true); // 'true' enables appending fileHandler.setFormatter (new SimpleFormatter()); // Optional: format the output Log.addHandler(fileHandler);
} catch (IOException e) {
}
Log.log(Level.SEVERE, "Failed to set up file handler, e);
Path docmentsfolder-Paths.get(config2_read.Docments());
Path failedfolder Paths.get(config2_read.Fail());
Path tempfolder Paths.get(config2_read.Temp());
Path processFolder Paths.get(config2_read.Processed());
I
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
try {
Log.setLevel(Level.ALL); // Log everything for(Path zipfile:stream) {
DirectoryStream<Path> stream-Files.newDirectoryStream(failedfolder,"*.zip");
String basename-zipfile.getFileName().toString().replace(".zip",""); Path targetdocments docmentsfolder.resolve(basename);
//skip if already existing in documents if(Files.exists(targetdocments)) {
}
System.out.println("File is already Existing = "+basename); Log.warning(String.format("File already exists: %s", basename));
continue;
//move zip form fail to tem
Dath vininter tannfaidar rernual-infila natFilalama/11






//skip if already existing in documents if(Files.exists(targetdocments)) {
}
app.log
config2_read.java
System.out.println("File is already Existing = "+basename); Log.warning(String.format("File already exists: %s", basename));
continue;
//move zip form fail to temp
Path zipintem = tempfolder.resolve(zipfile.getFileName()); Files.move(zipfile, zipintem, Standard CopyOption.REPLACE_EXISTING);
/ System.out.println("moved zip to temp");
/Log.info(String.format("Moved zip to temp: %s", zipintem));
//unzip
unzip(zipintem, tempfolder);
// System.out.println("Unzipped folder=" + zipintem); Log.info(String.format("Unzipped folder: %s", zipintem));
//chcek if both zip nad unzip folder existing in temp Path extreatedtempfolder = tempfolder.resolve(basename);
if(!Files.exists (zipintem) ||! Files.exists(extreatedtempfolder)) { // System.out.println("Error: Temp folder does not contain both");
}
/*
Log.info("Error: Temp folder does not contain both = "+ zipintem);
continue;
*//extreacted folder -> docments String extractfoldername =
zipfile.getFileName().toString(); Path extractfolder=tempfolder.resolve(extractfoldername);
if(Files.exists(extractfolder)) { Files.move(extractfolder, docmentsfolder.resolve(extractfoldername), StandardCopyOption.REPLACE_EXISTING



config.properties
Akash2.java
ExcelLogger.java
config2.properties
91
Zipunzip.java
config2.properties
app.log
config2_read.java
92
93
94
95
//move zip folder to docments
Files.move(extreatedtempfolder, targetdocments, Standard CopyOption.REPLACE_EXISTING);
Log.info("Moved zip to Docments = " + basename);
// System.out.println("Moved zip to processsed"+basename);
//move
96
97
98
99
Files.move (zipintem, processFolder.resolve(zipfile.getFileName()), StandardCopyOption.REPLACE_EXISTING);
//System.out.println("Moved zip to processsed"+zipfile.getFileName()); Log.info("Moved zip to processsed = " + basename);
100
}
101
102
}catch (Exception e) {
103
// TODO: handle exception
104
}
105
I
106
}
107
1080
109
110
111
112
113
114
115
116
117
118
String foldername=zipfilepath.getFileName().toString().replace(".zip", "");
Path unzipfolder = destdir.resolve(foldername);
try(ZipInputStream zis=new ZipInputStream(new FileInputStream(zipfilepath.toFile()))) {
Files.createDirectories (unzipfolder);
ZipEntry zipEntry;
while((zipEntry=zis.getNextEntry())!=null) {
Path newfilepath unzipfolder.resolve(zipEntry.getName());
if(zipEntry.isDirectory()) {
Files.createDirectories (newfilepath);
}else {
119
120
121
122
123
124
Files.createDirectories (newfilepath.getParent());
try(BufferedOutputStream bos=new BufferedOutputStream(Files.newOutputStream(newfilepath))){
byte[] buffer-new byte[1024];
while((len=zis.read(buffer))>0) {
int len;
bos.write(buffer, 0, len);
125
126
127
128
}
}
}
zis.closeEntry();





public static void unzip(Path zipfilepath, Path destdir) throws Exception {
String foldername=zipfilepath-getFileNane()-toString()-replace("-zip",
Path unzipfolder = destdir.resolve (foldername):
Files.createDirectories(unzipfolder);
try(ZipInputStream zis-new ZipInputStream(new FileInputStream(zipfilepath.toFile()))) {
ZipEntry zipEntry: while((zipEntry=zis-getNextEntry())!=null) k
Path newfilepath=unzipfolder.resolve(zipEntry-getName());
if (zipEntry. isDirectory()) {
Files. createDirectories(newfilepath);
Files.createDirectories(newfilepath.getParent());
try(BufferedOutputStream bos=new BufferedOutputStream(Files.newOutputStream(newfilepath))){
byte[] buffer-new byte[1024]; int len;
while (len=zis.read (buffer))>0) {
bos write(buffer, 0, len);
zis, closeEntry();
}catch (Exception e) {
// TODO: handle exception
Writable
Smart Insert
129: 14: 4622






import java.io.FileInputStream;
import java.util.Properties;
5
6
public class config2 read {
« Zipunzip.java
9
10
11
12
130
11.4
private Properties prop;
public config2_read() (
String file="C: \\Users\\10728653\\Documents\\NEWKafka\\Unzip\\config2-properties";
FileInputStream input=new FileInputStream(file);
prop=new Properties);
prop. load (input) ;
} catch (Exception e) {
e. printStackTrace();
36372829
public String Docments() {
return prop-getProperty("Docments");
}
public String Fail() {
return prop-getProperty ("Fail*);
public String Temp()
return prop. getProperty ("Temp") ;



import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.Iterator;

public class ExcelHelper {

    private Workbook inWb;
    private Workbook outWb;
    private Sheet inSheet;
    private Sheet outSheet;
    private int rowNum = 0;

    public ExcelHelper(String inputPath) throws IOException {
        FileInputStream fis = new FileInputStream(inputPath);
        inWb = new XSSFWorkbook(fis);
        inSheet = inWb.getSheetAt(0);

        outWb = new XSSFWorkbook();
        outSheet = outWb.createSheet("Results");

        // Header row
        Row header = outSheet.createRow(rowNum++);
        header.createCell(0).setCellValue("FileName");
        header.createCell(1).setCellValue("Status");
    }

    // Iterator for rows in input Excel
    public Iterator<Row> getRowIterator() {
        return inSheet.iterator();
    }

    // Append result into output Excel
    public void writeResult(String fileName, String status) {
        Row outRow = outSheet.createRow(rowNum++);
        outRow.createCell(0).setCellValue(fileName);
        outRow.createCell(1).setCellValue(status);
    }

    // Save output Excel to disk
    public void saveOutput(String outputPath) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(outputPath)) {
            outWb.write(fos);
        }
        outWb.close();
        inWb.close();
    }
}






import org.apache.poi.ss.usermodel.Row;

import java.io.*;
import java.nio.file.*;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class FilenetAutomation {

    public static void main(String[] args) {
        Path documentsFolder = Paths.get("C:\\Tpelaazy2xdueltesp_apps\\ESP_PROG\\PRD_RLDS_ECNB_33902_DOCUTECHDOCUMENTS_FILENETUPLOAD\\DOCUMENTS");
        Path failedFolder = Paths.get("M:\\Tpe1aszy2xdu81\\esp_apps\\ESP_PROG\\PRD_RLDS_ECNB_33982_DOCUTECHDOCUMENTS_FILENETUPLOAD\\FAILED");
        Path tempFolder = Paths.get("\\\\Tpelaazy2xduß1\\esp_apps\\ESP_DATA\\PRD_RLDS_ECNB_33902_DOCUTECHDOCUMENTS_FILENETUPLOAD\\TEMP_IN");
        Path processedFolder = Paths.get("C:\\Tpelaazy2duel\\esp_apps\\PRD_RLDS_ECNB_33982_DOCUTECHDOCUMENTS_FILENETUPLOAD\\PROCESSED");

        String inputExcel = "C:\\Users\\YourName\\Desktop\\input.xlsx";
        String outputExcel = "C:\\Users\\YourName\\Desktop\\output.xlsx";

        try {
            ExcelHelper excel = new ExcelHelper(inputExcel);
            Iterator<Row> rowIterator = excel.getRowIterator();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                if (row.getCell(0) == null) continue;

                String fileName = row.getCell(0).getStringCellValue().trim();
                if (!fileName.endsWith(".zip")) fileName += ".zip";

                String status;

                try {
                    Path docFolderCheck = documentsFolder.resolve(fileName.replace(".zip", ""));
                    Path failZipCheck = failedFolder.resolve(fileName);

                    if (Files.exists(docFolderCheck)) {
                        status = "Already exists in Documents";
                    } else if (Files.exists(failZipCheck)) {
                        // Move zip → Temp
                        Path zipInTemp = tempFolder.resolve(fileName);
                        Files.move(failZipCheck, zipInTemp, StandardCopyOption.REPLACE_EXISTING);

                        // Unzip into Temp
                        Path unzipFolder = unzipFile(zipInTemp, tempFolder);

                        if (Files.exists(zipInTemp) && Files.exists(unzipFolder)) {
                            // Move extracted folder → Documents
                            Files.move(unzipFolder, documentsFolder.resolve(unzipFolder.getFileName()), StandardCopyOption.REPLACE_EXISTING);
                            // Move zip → Processed
                            Files.move(zipInTemp, processedFolder.resolve(zipInTemp.getFileName()), StandardCopyOption.REPLACE_EXISTING);
                            status = "Processed successfully";
                        } else {
                            status = "Error: Missing zip/unzip in Temp";
                        }
                    } else {
                        status = "Not found in Failed or Documents";
                    }
                } catch (Exception e) {
                    status = "Error: " + e.getMessage();
                }

                // Write to Excel
                excel.writeResult(fileName, status);
            }

            excel.saveOutput(outputExcel);
            System.out.println("✅ Completed. Output written to " + outputExcel);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Unzips a file into a target folder.
     * @param zipFile path of the zip file
     * @param targetFolder where to unzip
     * @return Path of the extracted folder
     * @throws IOException
     */
    private static Path unzipFile(Path zipFile, Path targetFolder) throws IOException {
        String folderName = zipFile.getFileName().toString().replace(".zip", "");
        Path unzipFolder = targetFolder.resolve(folderName);
        Files.createDirectories(unzipFolder);

        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile.toFile()))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                Path newPath = unzipFolder.resolve(entry.getName());
                if (entry.isDirectory()) {
                    Files.createDirectories(newPath);
                } else {
                    Files.createDirectories(newPath.getParent());
                    try (BufferedOutputStream bos = new BufferedOutputStream(Files.newOutputStream(newPath))) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = zis.read(buffer)) > 0) {
                            bos.write(buffer, 0, len);
                        }
                    }
                }
                zis.closeEntry();
            }
        }

        return unzipFolder;
    }
}


